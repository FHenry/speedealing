/**
* @todo: recursively send requests until all contacts are fetched
*
* @see https://developers.google.com/google-apps/contacts/v3/reference#ContactsFeed
*
* To API test requests: 
*
* @see https://developers.google.com/oauthplayground/
*
* To format JSON nicely:
*
* @see http://jsonviewer.stack.hu/
*
* Note: The Contacts API has a hard limit to the number of results it can return at a 
* time even if you explicitly request all possible results. If the requested feed has 
* more fields than can be returned in a single response, the API truncates the feed and adds 
* a "Next" link that allows you to request the rest of the response.
*/
//var EventEmitter = require('events').EventEmitter;
var _ = require('underscore'),
  qs = require('querystring'),
  util = require('util'),
  url = require('url'),
  https = require('https'),
  querystring = require('querystring'),
  XMLWriter = require('xml-writer');

var GoogleContacts = function (opts) {
  if (typeof opts === 'string') {
    opts = { token: opts }
  }
  if (!opts) {
    opts = {};
  }

  this.contacts = [];
  this.consumerKey = opts.consumerKey ? opts.consumerKey : null;
  this.consumerSecret = opts.consumerSecret ? opts.consumerSecret : null;
  this.token = opts.token ? opts.token : null;
  this.refreshToken = opts.refreshToken ? opts.refreshToken : null;
  this.updatedMin = opts.updatedMin ? opts.updatedMin : null;
};

GoogleContacts.prototype = {};

//util.inherits(GoogleContacts, EventEmitter);


GoogleContacts.prototype._get = function (params, cb) {
  var self = this;

  if (typeof params === 'function') {
    cb = params;
    params = {};
  }

  var req = {
    host: 'www.google.com',
    port: 443,
    path: this._buildPath(params),
    method: 'GET',
    headers: {
      'Authorization': 'OAuth ' + this.token,
      'GData-Version': '3.0'
    }
  };

  console.log("HTTP req = ", req, "\n");

  https.request(req, function (res) {
    var data = '';

    res.on('end', function () {
      if (res.statusCode < 200 || res.statusCode >= 300) {
        var error = new Error('Bad client request status: ' + res.statusCode);
        return cb(error);
      }
      try {
        //console.log("Raw data = ", data, "\n");
        data = JSON.parse(data);
        cb(null, data);
      }
      catch (err) {
        cb(err);
      }
    });

    res.on('data', function (chunk) {
      //console.log(chunk.toString());
      data += chunk;
    });

    res.on('error', function (err) {
      cb(err);
    });

    //res.on('close', onFinish);
  }).on('error', function (err) {
    cb(err);
  }).end();
};

/* Get google contacts
 * @param params Hash parameters to get contacts.
 *        { email: "user@gmail.com" }
 * @param cb Callback called when error or to treat results.
 *        callback format : function (err, contacts)
 */
GoogleContacts.prototype.getContacts = function (params, cb) {
  var self = this;
  params.type = 'contacts';
  this.store_id = params.storeContactId || false;

  this._get(params, receivedContacts);
  function receivedContacts(err, data) {
    if (err) return cb(err);

    self._saveContactsFromFeed(data.feed);

    var next = false;
    data.feed.link.forEach(function (link) {
      if (link.rel === 'next') {
        next = true;
        var path = url.parse(link.href).path;
        self._get({ path: path }, receivedContacts);
      }
    });
    if (!next) {
      cb(null, self.contacts);
    }
  };
};

GoogleContacts.prototype._saveContactsFromFeed = function (feed) {
  var self = this;
  //console.log(feed);
  if (feed && feed.entry) {
    feed.entry.forEach(function (entry) {
        try {
          
          var new_contact = { };

          try { new_contact.lastname    = entry['gd$name']['gd$familyName']['$t']; } catch(e){}
          try { new_contact.firstname   = entry['gd$name']['gd$givenName']['$t']; } catch(e){}
          
          if (entry['gd$organization']) {
            new_contact.organization = {};
            try { new_contact.organization.name   = entry['gd$organization'][0]['gd$orgName']['$t']; } catch(e){}
            try { new_contact.organization.title  = entry['gd$organization'][0]['gd$orgTitle']['$t']; } catch(e){}
          }
          
          /* - Emails - */
          if (entry['gd$email']) {

            new_contact.emails = [];
            
            entry['gd$email'].forEach(function(email) {
              
              //console.log("> email = ", email);
              var emailType = email.rel;
              var emailTxt = email.address;

              if (emailType) {
                switch (emailType) {
                  case "http://schemas.google.com/g/2005#home":
                    new_contact.emails.push({type: "perso", address: emailTxt});
                    break;

                  case "http://schemas.google.com/g/2005#work":
                    new_contact.emails.push({type: "pro", address: emailTxt});
                    break;

                  case "http://schemas.google.com/g/2005#other":
                    new_contact.emails.push({type: "other", address: emailTxt});
                    break;

                  default:
                    console.log("> Email : unknow type.\n", emailType);
                }
              } else {
                console.log("> Email : no type.\n", email);
              }
            });
          } /* - end Emails - */
          
          /* - Phone numbers - */
          if (entry['gd$phoneNumber']) {
            entry['gd$phoneNumber'].forEach(function(phoneNumber) {
              
              //console.log("> phoneNumber = ", phoneNumber);
              var phoneNumberType = phoneNumber.rel;
              var phoneNumberTxt = phoneNumber['$t'];

              if (phoneNumberType) {
                switch (phoneNumberType) {
                  case "http://schemas.google.com/g/2005#mobile":
                    new_contact.phone_mobile = phoneNumberTxt;
                    break;

                  case "http://schemas.google.com/g/2005#work":
                    new_contact.phone = phoneNumberTxt;
                    break;

                  case "http://schemas.google.com/g/2005#home":
                    new_contact.phone_perso = phoneNumberTxt;
                    break;

                  case "http://schemas.google.com/g/2005#work_fax":
                    new_contact.fax = phoneNumberTxt;
                    break;

                  default:
                    console.log("> Phone : unknow type.\n", phoneNumberType);
                }
              } else {
                console.log("> Phone : no type.\n", phoneNumber);
  // TODO: apply to phone ?
                //console.log("> Phone : no type. Apply to 'phone'.\n", phoneNumber);
                //new_contact.phone = phoneNumberTxt;
              }
            });
          } /* - end Phone numbers - */   

          if (self.store_id) {
            try { 
              var id = entry['id']['$t'];
              new_contact.id = id.substring(id.lastIndexOf("/")+1);
            } catch(e){}
          }

          self.contacts.push(new_contact);
        }
        catch (e) {
          // property not available...
          // or link to next contacts
          console.log("_saveContactsFromFeed : property not available...");
          console.log("   or error when parsing = ", e);
        }
      
    });
  }
  console.log("\n_saveContactsFromFeed");
  console.log( JSON.stringify( self.contacts, null, 2) );
  console.log("Nb contacts = ", self.contacts.length);
}

GoogleContacts.prototype._buildPath = function (params) {
  if (params.path) return params.path;

  params = params || {};
  params.type = params.type || 'contacts';
  params.alt = params.alt || 'json';
  params.projection = params.projection || 'thin';
  params.email = params.email || 'default';
  params['max-results'] = params['max-results'] || 20000;
  params.updatedMin = this.updatedMin || '1980-01-01'

  var query = {
    alt: params.alt,
    'max-results': params['max-results'],
    'updated-min': params.updatedMin
  };

  var path = '/m8/feeds/';
  path += params.type + '/';
  path += params.email + '/'; 
  path += params.projection;
  path += '?' + qs.stringify(query);

  return path;
};

GoogleContacts.prototype.refreshAccessToken = function (refreshToken, cb) {
  if (typeof params === 'function') {
    cb = params;
    params = {};
  }

  var data = {
    refresh_token: refreshToken,
    client_id: this.consumerKey,
    client_secret: this.consumerSecret,
    grant_type: 'refresh_token'

  }

  var body = qs.stringify(data);

  var opts = {
    host: 'accounts.google.com',
    port: 443,
    path: '/o/oauth2/token',
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': body.length
    }
  };

  //console.log(opts);
  //console.log(data);

  var req = https.request(opts, function (res) {
    var data = '';
    res.on('end', function () {
      if (res.statusCode < 200 || res.statusCode >= 300) {
        var error = new Error('Bad client request status: ' + res.statusCode);
        return cb(error);
      }
      try {
        data = JSON.parse(data);
        //console.log(data);
        cb(null, data.access_token);
      }
      catch (err) {
        cb(err);
      }
    });

    res.on('data', function (chunk) {
      //console.log(chunk.toString());
      data += chunk;
    });

    res.on('error', function (err) {
      cb(err);
    });

    //res.on('close', onFinish);
  }).on('error', function (err) {
    cb(err);
  });

  req.write(body);
  req.end();
}
























// ********************************************************************
// insert contact

/* Get google contacts
 * @param params Hash parameters to get contacts.
 *        { email: "user@gmail.com" }
 * @param cb Callback called when error or to treat results.
 *        callback format : function (err, contacts)
 */
GoogleContacts.prototype.insertContact = function (contact, params, cb) {
  var self = this;
  params.type = 'contacts';

  if (typeof params === 'function') {
    cb = params;
    params = {};
  }

  var body = this._contactToXML(contact);
  //console.log(body);

  var opts = {
    host: 'www.google.com',
    port: 443,
    path: this._buildPathInsert(params),
    method: 'POST',
    headers: {
      'Authorization': 'OAuth ' + this.token,
      'GData-Version': '3.0',
      'Content-Type': 'application/atom+xml',
      'Content-Length': body.length
    }
  };

  console.log("HTTP req = ", opts, "\n");

  var req = https.request(opts, 

    function (res) {
      res.setEncoding('utf8');
    res.on('data', function(chunk){
        console.log(chunk);
    });
        if (res.statusCode < 200 || res.statusCode >= 300) {
          console.log(res.client.authorizationError);
          var error = new Error('Bad client request status: ' + res.statusCode);
          return cb(error);
        }
        cb(null);
     
  });

  //console.log(req);
  
  req.write(body);
  req.end();

  req.on('error', function (err) {
    cb(err);
  });
  
};


GoogleContacts.prototype._buildPathInsert = function (params) {
  if (params.path) return params.path;

  params = params || {};
  params.type = params.type || 'contacts';
  params.email = params.email || 'default';
  params.projection = params.projection || 'full';

  var path = '/m8/feeds/';
  path += params.type + '/';
  path += params.email + '/'; 
  path += params.projection;
  //path += '?' + qs.stringify(query);

  return path;
};




GoogleContacts.prototype._contactToXML = function (contact) {

    x = new XMLWriter;
    
    x.startElement('atom:entry')
      .writeAttribute('xmlns:atom', 'http://www.w3.org/2005/Atom')
      .writeAttribute('xmlns:gd', 'http://schemas.google.com/g/2005')
      
      .startElement('atom:category')
        .writeAttribute('scheme', 'http://schemas.google.com/g/2005#kind')
        .writeAttribute('term', 'http://schemas.google.com/contact/2008#contact')
    .endElement()

    .startElement('gd:name');
      if (contact.firstname) {
        x.startElement('gd:givenName')
        .text(contact.firstname)
        .endElement();
      }
      if (contact.lastname) {
        x.startElement('gd:familyName')
        .text(contact.lastname)
        .endElement();
      }
    x.endElement();

    if (contact.notes) {
      x.startElement('atom:content')
        .writeAttribute('type', 'text')
        .text(contact.notes)
      .endElement();
    }

    if (contact.emails) {
      contact.emails.forEach(function(email) {
        x.startElement('gd:email')
          .writeAttribute('address', email.address);

          var rel = '';
          switch (email.type) {
            case "perso":
              rel = 'http://schemas.google.com/g/2005#home';
              break;

            case "pro":
              rel = 'http://schemas.google.com/g/2005#work';
              break;

            case "other":
              rel = 'http://schemas.google.com/g/2005#other';
              break;
          }

          x.writeAttribute('rel', rel)  
        .endElement();
      });
    }

    if (contact.phone) {
      x.startElement('gd:phoneNumber')
        .writeAttribute('rel', 'http://schemas.google.com/g/2005#work')
        .text(contact.phone)
      .endElement();
    }

    if (contact.phone_mobile) {
      x.startElement('gd:phoneNumber')
        .writeAttribute('rel', 'http://schemas.google.com/g/2005#mobile')
        .text(contact.phone_mobile)
      .endElement();
    }

    if (contact.phone_perso) {
      x.startElement('gd:phoneNumber')
        .writeAttribute('rel', 'http://schemas.google.com/g/2005#home')
        .text(contact.phone_perso)
      .endElement();
    }

    if (contact.fax) {
      x.startElement('gd:phoneNumber')
        .writeAttribute('rel', 'http://schemas.google.com/g/2005#work_fax')
        .text(contact.fax)
      .endElement();
    }

  x.endElement();

  return x.toString();
}

















// ***************************************************
// delete contact


GoogleContacts.prototype.deleteContact = function (contact_id, params, cb) {

  var opts = {
    hostname: 'www.google.com',
    port: 443,
    path: this._buildPathInsert(params) + '/' + contact_id,
    method: 'DELETE',
    headers: {
      'Authorization': 'OAuth ' + this.token,
      'GData-Version': '3.0',
      'If-match': '*'
    }
  };

  console.log(opts);
  //console.log(data);

  var req = https.request(opts, function (res) {
    
      if (res.statusCode < 200 || res.statusCode >= 300) {
        //console.log(res);
        var error = new Error('Bad client request status: ' + res.statusCode);
        return cb(error);
      }
      cb(null);


    //res.on('close', onFinish);
  }).on('error', function (err) {
    cb(err);
  }).end();

}













exports.GoogleContacts = GoogleContacts;
